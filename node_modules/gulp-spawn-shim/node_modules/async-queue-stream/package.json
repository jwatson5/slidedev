{
  "name": "async-queue-stream",
  "version": "0.1.3",
  "description": "Stream using async.queue under the hood.",
  "main": "index.js",
  "keywords": [
    "stream",
    "streams",
    "user-streams",
    "pipe",
    "async",
    "queue"
  ],
  "scripts": {
    "test": "istanbul test --report html -x 'vendor/**' _mocha",
    "test-travis": "istanbul cover -x 'vendor/**' _mocha -- -R spec;A=$?;cat coverage/lcov.info | coveralls;exit $A"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Dashed/async-queue-stream.git"
  },
  "author": {
    "name": "Alberto Leal",
    "url": "https://github.com/dashed"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Dashed/async-queue-stream/issues"
  },
  "homepage": "https://github.com/Dashed/async-queue-stream",
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "istanbul": "*",
    "coveralls": "~2"
  },
  "dependencies": {
    "through": "~2"
  },
  "readme": "async-queue-stream\n==================\n\nWrapper for [through](https://github.com/dominictarr/through) stream to use [async.queue](https://github.com/caolan/async#queueworker-concurrency) under the hood.\n\nIt takes an asynchronous function and queue stream chunks. Then the queue executes the asynchronous function up to the concurrency threshold.\n\nAny error will be emitted to `opts.error_event` event. By default, the stream will not stop on error; this can be configured via `opts.stop_on_error`.\n\n## Install\n\n1. Install [Node.js](http://nodejs.org/)\n\n2.  Run: `npm install async-queue-stream`\n\n## API\n\n### asyncqueue(write_fn [[, end_fn], options])\n\n**Arguments**\n\n* `write_fn(data, callback)` - an asnynchronous function that will be wrapped into a through stream\n\n    `data` is the queued stream chunk.\n\n    There are three ways to invoke callback:\n    * `callback(null, transformedData)` - emit data\n    * `callback(error)` - emit error\n    * `callback()` - drop data (don't emit to next stream)\n\n* `end_fn()` - a function that will be invoked when no more data will be provided.\n\n* `options` - an object containing options\n    * `options.concurrency` - concurrency argument to [async.queue](https://github.com/caolan/async#queueworker-concurrency). ***Default:*** 1\n\n    * `options.error_event` - event name used to emit the error from callback via the asynchronous function. ***Default:*** 'failure'\n\n    * `options.stop_on_error` - boolean value for `asyncqueue` to stop queuing any more stream chunks if callback via the asynchronous function has emitted an error. ***Default:*** false\n\n        **Note:** Any tasks already executed will be able to complete.\n\nExample\n=======\n\n```js\nvar es = require('event-stream');\nvar qasync = require('queue-async-stream');\n\n// something that returns stream using queue-async-stream internally\nvar plugin = function(filter, filter_func) {\n\n    if(filter_func == void 0)\n        filter_func = function(n) { return n; };\n\n    return qasync(function (data, cb) {\n\n        if(filter_func(data) == filter) {\n            setTimeout(function() {\n\n                return cb(new Error(filter+''));\n            }, 1000);\n            return;\n        }\n\n        if(data === 2) {\n            setTimeout(function() {\n                return cb(null, data);\n            }, 2000);\n            return;\n        }\n\n        console.log('caught in plugin: ' + data)\n        return cb(null, data);\n\n   }, {concurrency: 2});\n};\n\n\nes.readArray([1,2,3,4,5])\n    .pipe(plugin(3))\n        .on('failure', console.log)\n    .pipe(es.through(function(n) {\n\n        console.log('caught in es.through: ' + n);\n\n        this.emit('data', n);\n    }));\n/**\nOutput:\n    caught in plugin: 1\n    caught in es.through: 1\n    [Error: 3]\n    caught in plugin: 4\n    caught in es.through: 4\n    caught in plugin: 5\n    caught in es.through: 5\n    caught in es.through: 2\n\n\nWith stop_on_error:true, output is:\n    caught in plugin: 1\n    caught in es.through: 1\n    [Error: 3]\n    caught in es.through: 2\n */\n```\n\nTo Do\n=====\n\n1. Be able to pass opts/hooks to async.queue (e.g. drain, empty, etc)\n\nLicense\n=======\n\nMIT. See LICENSE file.\n",
  "readmeFilename": "README.md",
  "_id": "async-queue-stream@0.1.3",
  "dist": {
    "shasum": "198349b8bab333cf7da2792ac95fe83c55af7830",
    "tarball": "http://registry.npmjs.org/async-queue-stream/-/async-queue-stream-0.1.3.tgz"
  },
  "_from": "async-queue-stream@~0",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "dashed",
    "email": "mail4alberto@gmail.com"
  },
  "maintainers": [
    {
      "name": "dashed",
      "email": "mail4alberto@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "198349b8bab333cf7da2792ac95fe83c55af7830",
  "_resolved": "https://registry.npmjs.org/async-queue-stream/-/async-queue-stream-0.1.3.tgz"
}
